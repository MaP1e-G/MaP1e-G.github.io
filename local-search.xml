<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python随笔-1</title>
    <link href="/2022/04/17/python-essay-1/"/>
    <url>/2022/04/17/python-essay-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>其实就是想补充下多道系统作业那篇文章里讲到的东西（指getMethod函数），补充下相关知识方便各位理解。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="前后双下划线方法"><a class="markdownIt-Anchor" href="#前后双下划线方法"></a> 前后双下划线方法</h2><p>同时具有前后双下划线的名称在Python中有特殊用途，我们最熟悉的应该就是<code>__init__</code>了，构造对象函数。当然啦，Python还是有非常多的对象属性的，如果想了解更多对象属性，可以调用<code>dir</code>函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(<span class="hljs-built_in">max</span>)<br>[<span class="hljs-string">&#x27;__call__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <br><span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <br><span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <br><span class="hljs-string">&#x27;__module__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__qualname__&#x27;</span>,<br> <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__self__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>,<br>  <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;__text_signature__&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在这里，我直接查看了一个内置函数<code>max</code>的属性，可以看到有非常多属性，我们也不必全部知道他们都用来干嘛。<br />仔细看的话会发现，<code>__lt__</code>也在里面，那么它到底是什么呢？其实它代表的是<strong>比较运算符’&lt;’</strong>。</p><h2 id="sort函数"><a class="markdownIt-Anchor" href="#sort函数"></a> sort函数</h2><p>先上Python官方文档<a href="https://docs.python.org/3.9/library/stdtypes.html#list.sort">点我跳转</a>：</p><blockquote><p>sort(*, key=None, reverse=False)</p><blockquote><p>This method sorts the list in place, using only &lt; comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).</p></blockquote></blockquote><p>也就是说，<code>sort</code>方法其实是根据 &lt; 运算符来进行排序的，也就是升序排序，如果觉得文字难以读懂，不妨写点东西试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>=[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>我们也应该记住一点，<code>sort</code>的排序算法是稳定的，当两个值相等的时候，即使是排序后它们的相对位置也不会变。<br /><em><strong>扩展</strong></em></p><blockquote><p>从上面我们能看到<code>sort</code>还支持两个额外的参数（注意是keyword-only arguments，传入必须像这样：<code>key=xxx, reverse=xxx</code>）<br />reverse很好理解，传入一个Boolean值（True or False），如果是True则倒序排列，默认为False。<br />key则用来产生排序算法所依赖的对比关键字，比如说，在对一些字符串排序时，可以用<code>key=str.lower</code>来实现忽略大小写的排序，或者用<code>key=len</code>来实现基于字符串长度的排序。</p></blockquote><h1 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h1><p>看完上面这点，再结合函数学习笔记那里的一些知识，其实就应该能清楚知道<code>getMethod</code>的机制和作用什么的了，传入一个字符串，根据字符串的不同返回不同的函数对象，用来重载JCB类的<code>__lt__</code>属性（在Python中是可以重载运算符的），这样在之后，我们对含有JCB类对象的列表中调用<code>sort</code>方法，就可以按照我们想要的排序方式来排序列表了。</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Essay</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记——函数</title>
    <link href="/2022/04/14/python-learning-1/"/>
    <url>/2022/04/14/python-learning-1/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文章用到的语言：Python</p>          </div><h1 id="函数作为对象"><a class="markdownIt-Anchor" href="#函数作为对象"></a> 函数作为对象</h1><p>在Python中，函数也是对象，所以我们可以把函数分配给变量、存储在数据结构中、作为参数传递给其他函数，也能作为其他函数的返回值。<br />初次看到这些内容的时候，我是挺惊讶而且发自内心的“すごい！”并且迫不及待地想要理解和掌握。<br />感觉写文章就是一个非常不错的方式，所以在这里我会尝试用自己所理解到的东西来完成这篇文章。<br />如果有什么问题的话可以尝试联系我~ <a href="https://map1e-g.github.io/about/">联系我</a></p><h2 id="怎么理解函数是对象"><a class="markdownIt-Anchor" href="#怎么理解函数是对象"></a> 怎么理解函数是对象</h2><p>现在有这样一个东西：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><p>这就是一个加法函数，传入 a 和 b 的值然后返回二者相加的值，我们可以在控制台调用它得到这样一个结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>如果我现在这么做的话（可以思考一下这段代码做了什么以及输出的结果）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>another_add = add<br><span class="hljs-meta">&gt;&gt;&gt; </span>another_add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>没错，输出的结果就是<code>5</code><br />接下来我们把原来定义的<code>add</code>函数用del删除，再调用<code>another_add</code>试试看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> add<br><span class="hljs-meta">&gt;&gt;&gt; </span>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>NameError: name <span class="hljs-string">&#x27;add&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>another_add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>现在<code>add</code>用不了了，但是<code>another_add</code>还能用，为什么呢？因为函数对象及其名称是相互独立的实体：<strong>指向函数的变量和函数本身实际上是彼此独立的</strong>。<br />这边可以了解一下下面这些东西（引用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python编程 从入门到实践（第2版）》 [美]埃里克·马瑟斯 人民邮电出版社">[1]</span></a></sup>）：</p><blockquote><p>变量是标签</p><blockquote><p>变量常被描述为可用于存储值的盒子。<br /><strong>一种好得多的定义是，变量是可以赋给值的标签，也可以说变量指向特定的值。</strong></p></blockquote></blockquote><p><em><strong>以下是扩展</strong></em></p><blockquote><p>Python在创建函数时都会为每个函数附加一个用于调试的字符串标识符，使用__name__属性来访问它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>add.__name__<br><span class="hljs-string">&#x27;add&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>another.__name__<br><span class="hljs-string">&#x27;add&#x27;</span><br></code></pre></td></tr></table></figure><p>PS:当然是在<code>add</code>没被删除之前调用的，删除后调用了会报错：<code>NameError: name 'add' is not defined</code><br />由于是在创建函数的时候给出的标识符，所以即使把这个函数分配给了另一个变量，这个标识符也不会变</p></blockquote><h2 id="把函数存储在数据结构中"><a class="markdownIt-Anchor" href="#把函数存储在数据结构中"></a> 把函数存储在数据结构中！</h2><p>由于函数是个对象，所以可以把函数也存储在数据结构当中，并且访问或使用他们。<br />比如把他们塞进列表里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>funcs = [another_add, <span class="hljs-built_in">max</span>, <span class="hljs-built_in">pow</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>funcs<br>[&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt;, &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt;, &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt;]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> fun <span class="hljs-keyword">in</span> funcs:<br><span class="hljs-meta">... </span>   <span class="hljs-built_in">print</span>(fun, fun(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt; <span class="hljs-number">5</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt; <span class="hljs-number">3</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>你也可以把它们塞进字典里，同样的，我们尝试访问这个字典，然后试着遍历这个字典并调用这些函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs = &#123;<span class="hljs-string">&#x27;another_add&#x27;</span>:another_add, <span class="hljs-string">&#x27;max&#x27;</span>:<span class="hljs-built_in">max</span>, <span class="hljs-string">&#x27;pow&#x27;</span>:<span class="hljs-built_in">pow</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs<br>&#123;<span class="hljs-string">&#x27;another_add&#x27;</span>: &lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt;, <span class="hljs-string">&#x27;max&#x27;</span>: &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt;, <span class="hljs-string">&#x27;pow&#x27;</span>: &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt;&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> fun <span class="hljs-keyword">in</span> dic_funcs.values():<br><span class="hljs-meta">... </span>   <span class="hljs-built_in">print</span>(fun, fun(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    <br>&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt; <span class="hljs-number">5</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt; <span class="hljs-number">3</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>并且，在这些数据结构里的函数对象都可以直接调用，不需要特意为他们分配一个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>funcs[<span class="hljs-number">0</span>](<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">5</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs[<span class="hljs-string">&#x27;max&#x27;</span>](<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><em><strong>本小节的补充</strong></em></p><blockquote><p><code>&lt;built-in function max&gt;</code>指出<code>max</code>函数是python的一个内置函数，所以给出的不是地址<br /><code>max</code>函数用于查找可迭代的最大值，关于可迭代，在之后的文章可能会介绍（也是python特性哦）<br /><code>pow(x, y)</code>函数就是平方函数了，将x的值返回为y的幂</p></blockquote><h2 id="将函数传递给其他函数"><a class="markdownIt-Anchor" href="#将函数传递给其他函数"></a> 将函数传递给其他函数</h2><p>由于函数是对象，因此可以将其作为参数传递给其他函数。<br />让我们通过一个例子来理解下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_max_or_min</span>(<span class="hljs-params">fun</span>):<br>value = fun(<span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p><code>get_max_or_min</code>函数获取一个函数参数，并调用这个函数得到一个值，然后将它打印出来，在这里可以由函数的名称看出来，我们可以向其中传入<code>max</code>或<code>min</code>函数<br />让我们尝试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>get_max_or_min(<span class="hljs-built_in">max</span>)<br><span class="hljs-number">10</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>get_max_or_min(<span class="hljs-built_in">min</span>)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可以看到都输出了正确的结果<br />“将函数对象作为参数传递给其他函数的功能非常强大，可以用来将程序中的<strong>行为</strong>抽象出来并传递出去。”<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup><br /><em><strong>扩展</strong></em><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup></p><blockquote><p>“能接受其他函数作为参数的函数称为<strong>高阶函数</strong>。”<br />“比如<code>map</code>函数，<code>map</code>接受一个函数对象和一个可迭代对象，然后在可迭代对象中的每个元素上调用该函数来生成结果。”<br />这里我们调用我们的<code>add</code>函数来看看<code>map</code>函数做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>可以看出，<code>map</code>函数遍历了整个列表并将<code>add</code>函数应用于每个元素，而且得到了一个新列表对象，存储两数相加后的结果。</p></blockquote><h2 id="嵌套函数"><a class="markdownIt-Anchor" href="#嵌套函数"></a> 嵌套函数</h2><p>在Python中，甚至可以在函数中定义函数，就是之前写多道系统作业调度模拟程序提到过的东西（<a href="https://map1e-g.github.io/2022/04/13/multi-JCB/">戳我跳转文章</a>）<br />在这里我们定义一个用来计算的函数，根据传入字符串的不同返回不同的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">text, x, y</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a - b<br><span class="hljs-keyword">if</span> text == <span class="hljs-string">&#x27;add&#x27;</span>:<br><span class="hljs-keyword">return</span> add(x, y)<br><span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;sub&#x27;</span>:<br><span class="hljs-keyword">return</span> sub(x, y)<br><span class="hljs-meta">&gt;&gt;&gt; </span>cal(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cal(<span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>但是需要注意的是嵌套函数的作用域：<strong>仅在创建它的函数的内部</strong><br />如果我们想在函数外部使用这个函数的话，可以像我上边提到的那篇文章中那样，创建一个变量，并把嵌套函数返回给父函数的调用者。<br />在这里，我就写个根据会员等级判断打折力度的函数来作为例子吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">discount</span>(<span class="hljs-params">level</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">platinum</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.75</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gold</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.8</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sliver</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.85</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copper</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.9</span><br>    <span class="hljs-keyword">if</span> level == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> platinum<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> gold<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> sliver<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> copper<br></code></pre></td></tr></table></figure><p>然后再测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>discount(<span class="hljs-number">3</span>)<br>&lt;function discount.&lt;<span class="hljs-built_in">locals</span>&gt;.gold at <span class="hljs-number">0x000001CF0C9BE3A0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_customer = discount(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_customer(<span class="hljs-number">100</span>)<br><span class="hljs-number">80.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>discount(<span class="hljs-number">3</span>)(<span class="hljs-number">100</span>)<br><span class="hljs-number">80.0</span><br></code></pre></td></tr></table></figure><p><em>“这意味着函数不仅可以通过参数<strong>接受行为</strong>，还可以<strong>返回行为</strong>。”</em><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup></p><h2 id="日后计划"><a class="markdownIt-Anchor" href="#日后计划"></a> 日后计划</h2><p>以后学到的有关函数这部分的内容也会一起在这里更新。</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>《Python编程 从入门到实践（第2版）》 [美]埃里克·马瑟斯 人民邮电出版社<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统原理——多道系统作业调度</title>
    <link href="/2022/04/13/multi-JCB/"/>
    <url>/2022/04/13/multi-JCB/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文章用到的语言：Python</p>          </div><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>其实一周前就把程序写完了，但是因为博客最近才搭好以及最近才学习了一手markdown所以现在才开始写<s><em>（绝对不是我懒！）</em></s><br />操作系统课程的作业，其实挺不想写的<s>（真的）</s>，毕竟我数据结构与算法学得很垃圾www，就当顺便学习python好了</p><h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h1><p>这部分略过。（因为真的没什么好写的，以后再补充一下吧）</p><blockquote><p>复制实验说明上的原话：</p><blockquote><p>由于在多道批处理系统中，一批作业投入运行，调度作业时需要根据当前系统各类空闲资源的情况选择一个或多个作业进入内存，再按照进程调度方式选择一个作业的进程占用 CPU。<br />每个作业由一个作业控制块JCB表示，JCB可以包含如下信息：作业名、提交时间、所需的运行时间、所需的资源、作业状态、链指针等等。<br />作业的状态可以是等待W(Wait)、运行R(Run)和完成F(Finish)三种状态之一。每个作业的最初状态总是等待W。<br />各个等待的作业按照提交时刻的先后次序排队，总是首先调度等待队列中队首的作业。<br />每个作业完成后要打印该作业的开始运行时刻、完成时刻、周转时间和带权周转时间，这一组作业完成后要计算并打印这组作业的平均周转时间、带权平均周转时间。</p></blockquote></blockquote><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><h2 id="核心"><a class="markdownIt-Anchor" href="#核心"></a> 核心</h2><p>有两部分，先说第一部分：作业控制块（JCB）<br />其实这里存的东西过多了，但是好处就是意思都很清晰，后面计算总时间或者打印信息什么的也方便</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">JCB</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;作业控制块&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, job_name, commit_time, run_time, source</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化作业程序块&quot;&quot;&quot;</span><br>        self.job_name = job_name  <span class="hljs-comment"># 作业名字</span><br>        self.commit_time = commit_time  <span class="hljs-comment"># 作业提交时间</span><br>        self.run_time = run_time  <span class="hljs-comment"># 作业所需时间</span><br>        self.start_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业开始时间</span><br>        self.finish_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业完成时间</span><br>        self.rr = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业响应比</span><br>        self.status = <span class="hljs-string">&#x27;w&#x27;</span>  <span class="hljs-comment"># 程序状态，w为等待，r为运行，f为完成</span><br>        self.ta_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业周转时间</span><br>        self.wta_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业带权周转时间</span><br>        self.source = source  <span class="hljs-comment"># 作业所需资源</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cul_rr</span>(<span class="hljs-params">self, clock</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算作业相应比&quot;&quot;&quot;</span><br>        self.rr = ((clock - self.commit_time) + self.run_time) / self.run_time<br></code></pre></td></tr></table></figure><p>然后是第二部分，这部分用到了python的特性：双下划线方法以及嵌套函数、返回函数等，这里用到的特性会放到后面要写的一些文章中更详细地介绍。<br />先看代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMethod</span>(<span class="hljs-params">method</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;不同算法的排序方法&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">FCFS_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.commit_time &lt; other.commit_time<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SJF_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.run_time &lt; other.run_time<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">HRRF_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.rr &gt; other.rr<br><br>    <span class="hljs-keyword">if</span> method == <span class="hljs-string">&#x27;FCFS&#x27;</span>:<br>        <span class="hljs-keyword">return</span> FCFS_lt<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;SJF&#x27;</span>:<br>        <span class="hljs-keyword">return</span> SJF_lt<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;HRRF&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HRRF_lt<br></code></pre></td></tr></table></figure><p>调用这个方法，传入一个字符串，根据不同的字符串返回不同的排序方法，这里一共用到了三种算法：</p><ul><li>FCFS：先来先服务</li><li>SJF：短作业优先</li><li>HRRF：响应比最高者优先</li></ul><p>比如我要用FCFS，那么就：<code>JCB.__lt__ = getMethod('FCFS')</code>，这里getMethod返回了一个函数对象，再赋值给了JCB类的<code>__lt__()</code>方法，这样<code>JCB.__lt__()</code>就和<code>FCFS_lt()</code>一样了（<strong>我省略了参数order</strong>），这个方法在之后的文章再详细说，<br />现在可以这样理解：这么做重载了JCB类的默认比较方法，两个JCB之间可以比大小了，怎么比就看<code>__lt__()</code>里了。<br />那么能比较大小了，排序就能方便起来，而python里边提供了<code>sort()</code>函数来对列表进行永久排序，这个时候即使列表里是一堆JCB对象，我们也可以进行排序。</p><h2 id="算法部分"><a class="markdownIt-Anchor" href="#算法部分"></a> 算法部分</h2><p>注释写得算比较清楚所以在这里不多赘述了，以后有空说不定会更新<s>（实打实的懒狗）</s><br />其实写得不算好吧…自己感觉是写复杂了，某些地方凭感觉写了点东西保证不出错，比如那个删除队列，按道理来说有写判断条件的话就不会出错</p><div class="note note-warning">            <p>注意这里用到了<code>copy.deepcopy()</code>，需要导入copy模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br></code></pre></td></tr></table></figure>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simulator</span>(<span class="hljs-params">JCB_queue, method, src</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;作业调度模拟程序&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 系统时钟和资源数</span><br>    clock = <span class="hljs-number">0</span><br>    source = src<br>    <span class="hljs-comment"># 平均周转时间</span><br>    avg_ta_time = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 平均带权周转时间</span><br>    avg_wta_time = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 拷贝队列</span><br>    copy_queue = copy.deepcopy(JCB_queue)<br>    <span class="hljs-comment"># 队列长度</span><br>    queue_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(copy_queue))<br>    <span class="hljs-comment"># 创建执行队列和等待队列</span><br>    wait_queue = []<br>    run_queue = []<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 排序</span><br>    JCB.__lt__ = getMethod(<span class="hljs-string">&#x27;FCFS&#x27;</span>)<br>    copy_queue.sort()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 运行队列中的作业变更</span><br>        <span class="hljs-keyword">if</span> run_queue:<br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> run_queue:<br>                <span class="hljs-comment"># 检查作业是否完成</span><br>                <span class="hljs-keyword">if</span> job.run_time &lt;= clock - job.start_time <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;r&#x27;</span>:<br>                    job.status = <span class="hljs-string">&#x27;f&#x27;</span>  <span class="hljs-comment"># 将当前作业状态设置为完成</span><br>                    job.finish_time = clock  <span class="hljs-comment"># 作业完成（结束）时间为当前系统时间</span><br>                    job.ta_time = job.finish_time - job.commit_time  <span class="hljs-comment"># 作业周转时间 = 作业完成时间 - 作业提交时间</span><br>                    job.wta_time = job.ta_time / job.run_time  <span class="hljs-comment"># 作业带权周转时间 = 作业周转时间 / 作业所需时间</span><br>                    avg_ta_time = avg_ta_time + job.ta_time<br>                    avg_wta_time = avg_wta_time + job.wta_time<br>                    num = num + <span class="hljs-number">1</span>  <span class="hljs-comment"># 作业完成数+1</span><br>                    source = source + job.source  <span class="hljs-comment"># 归还资源</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;作业名：<span class="hljs-subst">&#123;job.job_name&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业开始时间：<span class="hljs-subst">&#123;job.start_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业完成时间：<span class="hljs-subst">&#123;job.finish_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业周转时间：<span class="hljs-subst">&#123;job.ta_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业带权周转时间：<span class="hljs-subst">&#123;job.wta_time:<span class="hljs-number">.2</span>f&#125;</span>\t&quot;</span>)<br><br>        <span class="hljs-comment"># 检查是否有可以进入等待作业队列的作业</span><br>        <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> copy_queue:<br>            <span class="hljs-keyword">if</span> job.commit_time &lt;= clock <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;w&#x27;</span>:<br>                wait_queue.append(job)<br><br>        <span class="hljs-comment"># 等待队列不为空，检查是否有可以进入运行队列的作业</span><br>        <span class="hljs-keyword">if</span> wait_queue:<br>            <span class="hljs-comment"># 计算响应比</span><br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> wait_queue:<br>                job.cul_rr(clock)<br>            JCB.__lt__ = getMethod(method)<br>            wait_queue.sort()<br>            <span class="hljs-comment"># 用于删除等待队列列表元素的列表</span><br>            del_queue = []<br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> wait_queue:<br>                <span class="hljs-keyword">if</span> job.source &lt;= source <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;w&#x27;</span>:<br>                    run_queue.append(job)<br>                    del_queue.append(job)<br>                    job.start_time = clock  <span class="hljs-comment"># 作业开始时间为当前系统时间</span><br>                    job.status = <span class="hljs-string">&#x27;r&#x27;</span><br>                    source = source - job.source<br>            <span class="hljs-keyword">if</span> del_queue <span class="hljs-keyword">and</span> wait_queue:<br>                <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> del_queue:<br>                    wait_queue.remove(job)<br><br>        <span class="hljs-comment"># 跳出循环用</span><br>        <span class="hljs-keyword">if</span> num == queue_len:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 系统时钟自增</span><br>        clock = clock + <span class="hljs-number">1</span><br>    avg_ta_time = avg_ta_time / queue_len<br>    avg_wta_time = avg_wta_time / queue_len<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;平均周转时间：<span class="hljs-subst">&#123;avg_ta_time:<span class="hljs-number">.2</span>f&#125;</span>\t带权周转时间：<span class="hljs-subst">&#123;avg_wta_time:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h2><p>其实只有一个<code>input()</code>用来获取用户输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inputJCB</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;初始化JCB队列&quot;&quot;&quot;</span><br>    JCB_queue = []<br>    src = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入系统资源数：&quot;</span>))<br>    JCB_num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业数量：&quot;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(JCB_num):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前是第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>个作业；&quot;</span>)<br>        jn = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业名字：&quot;</span>)<br>        ct = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业提交时间：&quot;</span>))<br>        rt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业运行时间：&quot;</span>))<br>        sc = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业所需资源：&quot;</span>))<br>        new_JCB = JCB(jn, ct, rt, sc)<br>        JCB_queue.append(new_JCB)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-comment"># 打印JCB队列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(JCB_num):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>个作业名字：<span class="hljs-subst">&#123;JCB_queue[i].job_name&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业提交时间：<span class="hljs-subst">&#123;JCB_queue[i].commit_time&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业所需运行时间：<span class="hljs-subst">&#123;JCB_queue[i].run_time&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业所需资源数：<span class="hljs-subst">&#123;JCB_queue[i].source&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FCFS算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;FCFS&quot;</span>, src)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SJF算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;SJF&quot;</span>, src)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HRRF算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;HRRF&quot;</span>, src)<br></code></pre></td></tr></table></figure><p>python测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    inputJCB()<br></code></pre></td></tr></table></figure><h1 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h1><p>暂时不贴结果，没找到一个好云图库放图，上传到github也不合适www<br />麻烦各位自己运行一下了</p><h1 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h1><p>日后补充<s>（兄啊一篇文章下来省略了多少啊）</s></p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test my blog</title>
    <link href="/2022/04/12/Test-my-blog/"/>
    <url>/2022/04/12/Test-my-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="这是第一篇博文用于测试以及练习markdown语法"><a class="markdownIt-Anchor" href="#这是第一篇博文用于测试以及练习markdown语法"></a> 这是第一篇博文，用于测试以及练习markdown语法</h1><h2 id="打两个就是二级标题"><a class="markdownIt-Anchor" href="#打两个就是二级标题"></a> 打两个##就是二级标题</h2><h3 id="markdown字体"><a class="markdownIt-Anchor" href="#markdown字体"></a> Markdown字体</h3><p><em>斜体文本一个*</em><br /><strong>粗体文本两个*</strong><br /><em><strong>斜粗体文本三个*</strong></em></p><h3 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h3><hr /><h2 id="font-size3-facemicrosoft-yahei用三个-或者三个把文本围起来上面一行下面一行font虽然但是为什么分割线里的文本默认挺大的思考这里我用font-size改了"><a class="markdownIt-Anchor" href="#font-size3-facemicrosoft-yahei用三个-或者三个把文本围起来上面一行下面一行font虽然但是为什么分割线里的文本默认挺大的思考这里我用font-size改了"></a> <font size=3 face='Microsoft YaHei'>用三个-或者三个*把文本围起来(上面一行下面一行)</font><br />虽然但是为什么分割线里的文本默认挺大的（思考🤔（（这里我用&lt;font size&gt;改了</h2><h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3><p>两个波浪线括起来就能<s>删除</s>了</p><p><s>这样我就能乱说话乐！</s></p><p>为什么用空格不能换行啊！</p><h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3><p><u>直接用html的&lt;u&gt;标签</u></p><h3 id="脚注"><a class="markdownIt-Anchor" href="#脚注"></a> 脚注</h3><p>这里有一个脚注<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><ul><li>星号+空格+内容</li><li>或者</li><li>+号也行</li><li>-号也行</li><li>有序列表用序号</li></ul><ol><li>这是有序嵌套无序：<ul><li>我是无序</li></ul></li><li>我是有序</li></ol><h3 id="markdown区块"><a class="markdownIt-Anchor" href="#markdown区块"></a> Markdown区块</h3><blockquote><p>用&gt;加上一个空格再加上文本就好了</p><blockquote><p>区块嵌套就写多点&gt;</p><blockquote><ul><li>区块里边用列表也行</li></ul></blockquote></blockquote></blockquote><ul><li>反过来列表里用区块也行<blockquote><p>在最前边摁个tab就好啦</p></blockquote></li></ul><h3 id="markdown-代码"><a class="markdownIt-Anchor" href="#markdown-代码"></a> Markdown 代码</h3><p>在一行里直接用`包起来就好啦 -&gt; <code>print()</code>函数<br />代码块就用三个`包起来</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topics</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示所有的主题&quot;&quot;&quot;</span><br>    topics = Topic.objects.order_by(<span class="hljs-string">&#x27;data_added&#x27;</span>)<br>    context = &#123;<span class="hljs-string">&#x27;topics&#x27;</span>: topics&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;learning_logs/topics.html&#x27;</span>, context)<br></code></pre></td></tr></table></figure><h3 id="markdown-链接"><a class="markdownIt-Anchor" href="#markdown-链接"></a> Markdown 链接</h3><p>休息一下，听首歌吧~ <a href="https://www.bilibili.com/video/BV1ty4y1y76V?share_source=copy_web"><s>神必链接</s></a></p><h3 id="markdown-图片"><a class="markdownIt-Anchor" href="#markdown-图片"></a> Markdown 图片</h3><p>如图：<br /><img src="https://pic1.zhimg.com/v2-e81ff8868ed8bde326ae6074eb8dab40_r.jpg" alt="野兽红茶" /></p><h3 id="markdown-表格"><a class="markdownIt-Anchor" href="#markdown-表格"></a> Markdown 表格</h3><p>用 | 来分隔不同单元格，用 - 来分隔表头和其他行</p><table><thead><tr><th style="text-align:left">114</th><th style="text-align:right">514</th><th style="text-align:center">1919810</th></tr></thead><tbody><tr><td style="text-align:left">哼</td><td style="text-align:right">哼  啊</td><td style="text-align:center">啊啊啊</td></tr></tbody></table><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><hr /><h2 id="堂堂完结"><a class="markdownIt-Anchor" href="#堂堂完结"></a> 堂堂完结</h2><p>（<s>其实是想上床摆烂了</s></p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>加VX请吃KFC疯狂木曜日捏 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>Gossip</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
