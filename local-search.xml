<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>操作系统原理——虚拟存储管理实验</title>
    <link href="/2022/04/29/page-store/"/>
    <url>/2022/04/29/page-store/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文章用到的语言：Python</p>          </div><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前排提个醒，这个程序我觉得自己写得挺复杂的（因为我懒癌犯了，没有想着优化，也没有想着跟题目走），so大家看看就好。</p><h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h1><p>老样子照搬：</p><blockquote><p>突然发现这次没得搬的我be like： 😦</p></blockquote><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><h2 id="一些一些一些全局变量"><a class="markdownIt-Anchor" href="#一些一些一些全局变量"></a> 一些一些一些全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python">input_queue = [<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, ]  <span class="hljs-comment"># 输入队列</span><br>a_queue = []  <span class="hljs-comment"># 保存用于打印的结果</span><br>b_queue = []  <span class="hljs-comment"># 同上</span><br>c_queue = []  <span class="hljs-comment"># 同上</span><br>interrupt_queue = []  <span class="hljs-comment"># 中断队列，保存发生中断时候的位置</span><br>page_queue = []  <span class="hljs-comment"># 保存页表类对象的队列</span><br>ram_queue = []  <span class="hljs-comment"># 虚拟内存队列</span><br></code></pre></td></tr></table></figure><p>（小声：其实我会很大程度写出这样的程序是题目要求的输出的问题，真的</p><h2 id="一直到最后都没什么用的页表类"><a class="markdownIt-Anchor" href="#一直到最后都没什么用的页表类"></a> 一直到最后都没什么用的页表类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PageList</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;页表类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, status, quote</span>):<br>        self.status = status  <span class="hljs-comment"># 状态</span><br>        self.quote = quote  <span class="hljs-comment"># 引用位</span><br></code></pre></td></tr></table></figure><p>真的没用。真的没用。真的没用。直接往下看吧。我用数组下标完成工作的。</p><h2 id="获取输入-打印结果-重置各队列"><a class="markdownIt-Anchor" href="#获取输入-打印结果-重置各队列"></a> 获取输入、打印结果、重置各队列</h2><p>获取输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_data</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;获取用户输入来选择算法&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        algorithm = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请选择一个算法：A、最佳置换；B、先进先出置换；C、最近最少用置换；D、退出&quot;</span>)<br>        <span class="hljs-keyword">if</span> algorithm == <span class="hljs-string">&#x27;A&#x27;</span>:<br>            opt()<br>        <span class="hljs-keyword">elif</span> algorithm == <span class="hljs-string">&#x27;B&#x27;</span>:<br>            fifo()<br>        <span class="hljs-keyword">elif</span> algorithm == <span class="hljs-string">&#x27;C&#x27;</span>:<br>            lru()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序退出！&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        reset_page()<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_result</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;打印各个队列&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> input_queue, a_queue, b_queue, c_queue, interrupt_queue<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> input_queue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>.center(<span class="hljs-number">3</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a_queue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>.center(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b_queue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>.center(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c_queue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>.center(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> interrupt_queue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>.center(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;|&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;该算法一共发生了<span class="hljs-subst">&#123;interrupt_queue.count(<span class="hljs-string">&#x27;+&#x27;</span>)&#125;</span>页面置换，缺页中断率为<span class="hljs-subst">&#123;interrupt_queue.count(<span class="hljs-string">&#x27;+&#x27;</span>)*<span class="hljs-number">100</span>/<span class="hljs-built_in">len</span>(input_queue)&#125;</span>%&quot;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>重置各队列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_page</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;重置页表状态&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> a_queue, b_queue, c_queue, interrupt_queue, ram_queue<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> page_queue:<br>        page.status = <span class="hljs-number">0</span><br>        page.quote = <span class="hljs-number">0</span><br>    a_queue = []<br>    b_queue = []<br>    c_queue = []<br>    interrupt_queue = []<br>    ram_queue = []<br></code></pre></td></tr></table></figure><h2 id="最优置换算法"><a class="markdownIt-Anchor" href="#最优置换算法"></a> 最优置换算法</h2><p>最优是我想了最久的，毕竟其他两个确实不难，这里仔细划分每种情况就清晰多了。<br />首先是虚拟内存当前是否满的情况，这里要注意在虚拟内存未满的时候产生缺页中断是插入队尾而不是队头（就这个OPT是这样），其实虚拟内存未满的情况下还需要考虑是否产生缺页中断，我这里写的是没有考虑的。<br />然后是虚拟内存满了后，产生缺页中断和不产生缺页中断的情况。不产生缺页中断就不需要对虚拟内存进行操作了。<br />产生缺页中断后，我首先找剩下不需要再调用的页面，这部分页面的优先级是最大的，当然这是在有python列表方法的情况下这么写简单，直接找最迟访问也行。如果都还要访问那就找最迟访问的页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">opt</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;to do&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> input_queue, a_queue, b_queue, c_queue, interrupt_queue, page_queue, ram_queue<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_queue)):  <span class="hljs-comment"># 遍历整个序列</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">if</span> input_queue[index] <span class="hljs-keyword">in</span> ram_queue:  <span class="hljs-comment"># 当前虚拟内存中有该页，不产生缺页中断，也不需要改变虚拟内存中的页表</span><br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment"># 未产生缺页中断，所以塞个&#x27; &#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 虚拟内存满的情况下，调用对应页面置换算法置换页面</span><br>                find = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> exchange_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ram_queue)):  <span class="hljs-comment"># 找出需要置换的页面在虚拟内存队列中的下标</span><br>                    <span class="hljs-keyword">if</span> ram_queue[exchange_index] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> input_queue[index + <span class="hljs-number">1</span>:]:  <span class="hljs-comment"># 如果在剩下的序列中都找不到该页，可以直接换出去</span><br>                        find = <span class="hljs-number">1</span>  <span class="hljs-comment"># 标记是否找到了置换页面</span><br>                        exchange_page = ram_queue[exchange_index]<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> find == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 三个页在剩下的序列中还有访问</span><br>                    tmp_queue = input_queue[index + <span class="hljs-number">1</span>:]<br>                    max_index = <span class="hljs-number">0</span><br>                    exchange_page = <span class="hljs-number">0</span><br>                    <span class="hljs-keyword">for</span> tmp_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ram_queue)):  <span class="hljs-comment"># 找出最迟访问的页</span><br>                        new_index = tmp_queue.index(ram_queue[tmp_index])<br>                        <span class="hljs-keyword">if</span> max_index &lt; new_index:<br>                            max_index = new_index<br>                            exchange_page = ram_queue[tmp_index]<br>                <span class="hljs-keyword">for</span> tmp_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ram_queue)):<br>                    <span class="hljs-keyword">if</span> exchange_page == ram_queue[tmp_index]:  <span class="hljs-comment"># 进行页面置换</span><br>                        ram_queue[tmp_index] = input_queue[index]<br>                        <span class="hljs-keyword">break</span><br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(ram_queue) &lt;= <span class="hljs-number">2</span>:  <span class="hljs-comment"># 虚拟内存队列长度为0、1、2的情况</span><br>            ram_queue.append(input_queue[index])<br>            a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>            b_queue.append(ram_queue[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            c_queue.append(ram_queue[<span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>            <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OPT页面置换算法示意图如下：&quot;</span>)<br>    print_result()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="先进先出置换算法"><a class="markdownIt-Anchor" href="#先进先出置换算法"></a> 先进先出置换算法</h2><p>其实就是很简单的队列操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fifo</span>():<br>    <span class="hljs-keyword">global</span> input_queue, a_queue, b_queue, c_queue, interrupt_queue, page_queue, ram_queue<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_queue)):  <span class="hljs-comment"># 遍历整个序列</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">if</span> input_queue[index] <span class="hljs-keyword">in</span> ram_queue:  <span class="hljs-comment"># 当前虚拟内存中有该页，不产生缺页中断，也不需要改变虚拟内存中的页表</span><br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment"># 未产生缺页中断，所以塞个&#x27; &#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 虚拟内存满的情况下，调用对应页面置换算法置换页面</span><br>                ram_queue.insert(<span class="hljs-number">0</span>, input_queue[index])  <span class="hljs-comment"># 队列头进</span><br>                ram_queue.pop()  <span class="hljs-comment"># 队列尾出</span><br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(ram_queue) &lt;= <span class="hljs-number">2</span>:  <span class="hljs-comment"># 虚拟内存队列长度为0、1、2的情况</span><br>            ram_queue.insert(<span class="hljs-number">0</span>, input_queue[index])<br>            a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>            b_queue.append(ram_queue[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            c_queue.append(ram_queue[<span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>            <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FIFO页面置换算法示意图如下：&quot;</span>)<br>    print_result()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="最近最少用置换算法"><a class="markdownIt-Anchor" href="#最近最少用置换算法"></a> 最近最少用置换算法</h2><p>其实和队列也没多大差，要是当前队列有对应页，就把该页和队头那一页调换位置就好了，产生缺页中断时候的操作和FIFO是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lru</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;to do&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> input_queue, a_queue, b_queue, c_queue, interrupt_queue, page_queue, ram_queue<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_queue)):  <span class="hljs-comment"># 遍历整个序列</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">if</span> input_queue[index] <span class="hljs-keyword">in</span> ram_queue:  <span class="hljs-comment"># 当前虚拟内存中有该页，不产生缺页中断，也不需要改变虚拟内存中的页表</span><br>                ram_queue.remove(input_queue[index])<br>                ram_queue.insert(<span class="hljs-number">0</span>, input_queue[index])<br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment"># 未产生缺页中断，所以塞个&#x27; &#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 虚拟内存满的情况下，调用对应页面置换算法置换页面</span><br>                ram_queue.pop()<br>                ram_queue.insert(<span class="hljs-number">0</span>, input_queue[index])<br>                a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>                b_queue.append(ram_queue[<span class="hljs-number">1</span>])<br>                c_queue.append(ram_queue[<span class="hljs-number">2</span>])<br>                interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(ram_queue) &lt;= <span class="hljs-number">2</span>:  <span class="hljs-comment"># 虚拟内存队列长度为0、1、2的情况</span><br>            ram_queue.append(input_queue[index])<br>            a_queue.append(ram_queue[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 保存用于打印的结果</span><br>            b_queue.append(ram_queue[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            c_queue.append(ram_queue[<span class="hljs-number">2</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ram_queue) == <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span>)<br>            interrupt_queue.append(<span class="hljs-string">&#x27;+&#x27;</span>)  <span class="hljs-comment"># 产生缺页中断，所以塞个&#x27;+&#x27;进去</span><br>            <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 继续下次循环</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LRU页面置换算法示意图如下：&quot;</span>)<br>    print_result()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h2 id="测试代码"><a class="markdownIt-Anchor" href="#测试代码"></a> 测试代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 初始化页表，一共有八页</span><br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    page_queue.append(PageList(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><br>    input_data()<br></code></pre></td></tr></table></figure><h1 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h1><p><s>没想到吧，我这次放运行结果了！</s></p><p><img src="/img/page_store/result_opt.png" alt="最优置换"></p><p><img src="/img/page_store/result_fifo.png" alt="先进先出置换"></p><p><img src="/img/page_store/result_lru.png" alt="最近最少用置换"></p><h1 id="一些一些一些其他垃圾话"><a class="markdownIt-Anchor" href="#一些一些一些其他垃圾话"></a> 一些一些一些其他垃圾话</h1><p>其实本来是想优化的，但是由于我太懒了（五一假那能叫懒吗）所以计划取消了！</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记——测试代码</title>
    <link href="/2022/04/24/python-learning-3/"/>
    <url>/2022/04/24/python-learning-3/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>本文章尚未更新完毕</p>          </div><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>要验证我们所编写的代码是否能像我们所想的那样工作，我们就需要对我们的代码进行测试。<br />但是一般情况下，验证都涉及到数据的输入，这可就麻烦了，为了测试我们的代码，每运行一次都得输入一次数据，这样做即低效又烦琐。<br />而且以后每修改一次函数/类，我们也要做一次这样的工作，想想就头晕，不是吗？<br />好在Python提供了一种自动测试函数输出的高效方式：通过unittest模板来测试代码。</p><h1 id="什么事unittest"><a class="markdownIt-Anchor" href="#什么事unittest"></a> 什么事Unittest？</h1><p>简单地说，其实就是一个提供一系列代码测试工具的一个模块。在<a href="https://docs.python.org/3.9/library/unittest.html?highlight=unittest#module-unittest">官方文档</a>中描述如下：</p><blockquote><p>The unittest unit testing framework was originally inspired by JUnit and has a similar flavor as major unit testing frameworks in other languages.<br />It supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.</p><p>To achieve this, unittest supports some important concepts in an object-oriented way:</p><p>test fixture</p><blockquote><p>A test fixture represents the preparation needed to perform one or more tests, and any associated cleanup actions.<br />This may involve, for example, creating temporary or proxy databases, directories, or starting a server process.</p></blockquote><p>test case</p><blockquote><p>A test case is the individual unit of testing. It checks for a specific response to a particular set of inputs.<br />unittest provides a base class, TestCase, which may be used to create new test cases.</p></blockquote><p>test suite</p><blockquote><p>A test suite is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together.</p></blockquote><p>test runner</p><blockquote><p>A test runner is a component which orchestrates the execution of tests and provides the outcome to the user.<br />The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests.</p></blockquote></blockquote><p>官方文档讲了四种概念，但在这边目前仅涉及test case，即测试用例，这一概念的使用。<br />正如官方文档所说，test case检查输入特定的数据时的响应。正因如此我们可以用它来简化我们的需要输入数据的测试。</p><h1 id="unittest中的断言方法"><a class="markdownIt-Anchor" href="#unittest中的断言方法"></a> Unittest中的断言方法</h1><p>因为我们需要检查输出的结果，所以就要用到<code>unittest</code>中的断言方法，在这里我列举了一些方法。</p><h1 id="对函数进行测试"><a class="markdownIt-Anchor" href="#对函数进行测试"></a> 对函数进行测试</h1><p>要对函数进行测试，首先我们得有用于测试的函数，我们既可以自行定义要测试的函数，也可以利用Python自带的函数，这里我先自行定义一个函数，它用于将两数相加并返回该值。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><h2 id="通过的测试"><a class="markdownIt-Anchor" href="#通过的测试"></a> 通过的测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddTestCase</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two_num_add</span>(<span class="hljs-params">self</span>):<br>        result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>        self.assertEqual(result, <span class="hljs-number">3</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><p>首先导入<code>unittest</code>模块。<br />然后创建了一个名为 <code>AddTestCase</code> 的类，名字是可以随便取的，但是最好简单易懂（其实写注释就好啦）。要进行测试，这个类必须继承 <code>unittest.TsetCase</code> 类。<br />类里面目前只写了一个方法，用于测试两个数相加的情况。在运行时，所有以test_打头的方法都将自动运行。<br />在这个方法中，调用了之前编写的<code>add</code>函数并将值返回到<code>result</code>变量中，然后用<code>unittest</code>中的断言方法来判断得到的结果是否与我们预期结果一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">.<br>----------------------------------------------------------------------<br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s<br><br>OK<br></code></pre></td></tr></table></figure><p>直接运行这个文件，我们会得到如上输出。句点的数量代表了通过的测试数，在上面我们有一个句点，说明通过了一个测试。接下来的一行指出“在xxx秒内运行了xxx个测试”。最后的OK表示该测试用例中的所有单元测试都通过了。</p><h2 id="未通过的测试"><a class="markdownIt-Anchor" href="#未通过的测试"></a> 未通过的测试</h2><p>如果测试未通过，控制台/终端会输出什么信息呢？试一下就知道了。这里我故意编写了一个无法通过的测试，将<strong>3</strong>改为了<strong>4</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddTestCase</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two_num_add</span>(<span class="hljs-params">self</span>):<br>        result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>        self.assertEqual(result, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">F<br>======================================================================<br>FAIL: test_two_num_add (__main__.AddTestCase)<br>----------------------------------------------------------------------<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;G:\example1.py&quot;</span>, line <span class="hljs-number">11</span>, <span class="hljs-keyword">in</span> test_two_num_add<br>    self.assertEqual(result, <span class="hljs-number">4</span>)<br>AssertionError: <span class="hljs-number">3</span> != <span class="hljs-number">4</span><br><br>----------------------------------------------------------------------<br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.001</span>s<br><br>FAILED (failures=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这里第一行显示测试用例中有一个单元测试失败，接下来告诉你具体是哪个单元测试，紧接着就是Traceback——详细的报错信息了。在最后，我们还能看到运行该测试用例时失败了多少个单元测试。<br />在这里报的错是<strong>F</strong>，还有一种报错是<strong>E</strong>，这里一并演示一下：首先改下我们的函数<code>add</code>的代码，让它从现在开始接受三个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddTestCase</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two_num_add</span>(<span class="hljs-params">self</span>):<br>        result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>        self.assertEqual(result, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>然后运行，得到如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">E<br>======================================================================<br>ERROR: test_two_num_add (__main__.AddTestCase)<br>----------------------------------------------------------------------<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;G:\example1.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> test_two_num_add<br>    result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>TypeError: add() missing <span class="hljs-number">1</span> required positional argument: <span class="hljs-string">&#x27;c&#x27;</span><br><br>----------------------------------------------------------------------<br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.001</span>s<br><br>FAILED (errors=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>可以看到，在这里出的错就是E，即error了。<br />通过对比我们就能知道，E代表程序代码引发的测试错误，F代表程序输出的结果没有得到“预期的结果”（毕竟所谓预期的结果也是我们自己所定义的）。</p><h1 id="对类进行测试"><a class="markdownIt-Anchor" href="#对类进行测试"></a> 对类进行测试</h1><p><em><strong>to do…</strong></em></p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统原理——可变分区存储管理</title>
    <link href="/2022/04/20/variable-partition/"/>
    <url>/2022/04/20/variable-partition/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h1><p>进行一个实验报告的抄~</p><blockquote><p>可变分区方式是按作业需要的主存空间大小来分区。<br />当装入一个作业时，首先要查看是否有足够的空闲空间来分配，若有则按指定的分配方式进行分配；否则作业不能装入。</p><blockquote><p>可变分区的三种分配算法就是为作业分配主存空间的方法。</p><ul><li>最先适应算法：在空闲区间中查询满足作业需要的空间，并将作业装入第一个满足条件的空间中去。</li><li>最佳适应算法：在空闲区间中查询满足作业需要的空间，并将作业装入满足条件的空闲空间中最小的一个空间中去。</li><li>最坏适应算法：在空闲区间中查询满足作业需要的空间，并将作业装入满足条件的空闲空间中最大的一个空间中去。</li></ul></blockquote><blockquote><p>从三种算法的说明可以看出，分配空间的过程主要可以分两步：</p><ol><li>查询所有满足作业需求的空间块。</li><li>按照指定的算法将作业装入空间块中。</li></ol></blockquote><blockquote><p>可变分区的回收算法：</p><ul><li>回收区有下邻空闲区</li><li>回收区有上邻空闲区</li><li>归还区既有上邻空闲区又有下邻空闲区</li><li>归还区既无上邻空闲区又有下邻空闲区</li></ul></blockquote></blockquote><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><h2 id="空闲表和已分配表"><a class="markdownIt-Anchor" href="#空闲表和已分配表"></a> 空闲表和已分配表</h2><p>这里其实根据我的作业要求只能用一个内存分区表（就是一个列表）来实现的，但是明显是用两个表来表示会更方便，这样就不需要标志属性了！<s>（偷懒）</s><br />所以我定义了两个全局变量，一个存空闲分区，一个存已分配分区。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python">free_list = []  <span class="hljs-comment"># 空闲列表</span><br>allocated_list = []  <span class="hljs-comment"># 已分配列表</span><br></code></pre></td></tr></table></figure><h2 id="空闲空间和已分配空间"><a class="markdownIt-Anchor" href="#空闲空间和已分配空间"></a> 空闲空间和已分配空间</h2><p>这边用了两个类来表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Free</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;空闲表类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start, length</span>):<br>        self.start = start  <span class="hljs-comment"># 起址</span><br>        self.length = length    <span class="hljs-comment"># 长度</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocated</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;已分配表类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, start, length</span>):<br>        self.name = name    <span class="hljs-comment"># 作业名</span><br>        self.start = start  <span class="hljs-comment"># 起址</span><br>        self.length = length    <span class="hljs-comment"># 长度</span><br></code></pre></td></tr></table></figure><h2 id="读取用户输入"><a class="markdownIt-Anchor" href="#读取用户输入"></a> 读取用户输入</h2><p>我先不急着实现功能，而是先做了“具有交互功能”（确信）的函数，能够让用户操作数据和读取数据！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_data</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;读取用户输入以及操作&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list, allocated_list<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        op = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请选择要进行的操作：A 分配主存； B 回收主存； C 显示主存； Q 退出；&quot;</span>)<br>        <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;A&#x27;</span>:<br>            job_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业名：&quot;</span>)<br>            length = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业长度&quot;</span>))<br>            algorithm = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入分配算法：A 最先适应； B 最优适应； C 最坏适应；&quot;</span>)<br>            <span class="hljs-keyword">if</span> algorithm == <span class="hljs-string">&#x27;A&#x27;</span>:<br>                allocate(job_name, length, algorithm)<br>            <span class="hljs-keyword">elif</span> algorithm == <span class="hljs-string">&#x27;B&#x27;</span>:<br>                allocate(job_name, length, algorithm)<br>            <span class="hljs-keyword">elif</span> algorithm == <span class="hljs-string">&#x27;C&#x27;</span>:<br>                allocate(job_name, length, algorithm)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误，请重新输入。&quot;</span>)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;B&#x27;</span>:<br>            recycle_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要回收的作业名：&quot;</span>)<br>            recycle(recycle_name)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;C&#x27;</span>:<br>            display()<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;Q&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序退出。&quot;</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误，请重新输入。&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="显示主存空间"><a class="markdownIt-Anchor" href="#显示主存空间"></a> 显示主存空间</h2><p>为了检查前面写的代码没什么问题，比如功能选择、空闲和已分配列表，我决定先实现这个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;打印两张表&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list, allocated_list<br>    free_list_sort(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空闲表&quot;</span>.center(<span class="hljs-number">32</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;起址&quot;</span>.center(<span class="hljs-number">10</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">&quot;长度&quot;</span>.center(<span class="hljs-number">10</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">&quot;终址&quot;</span>.center(<span class="hljs-number">10</span>))<br>    <span class="hljs-keyword">for</span> free <span class="hljs-keyword">in</span> free_list:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;free.start&#125;</span>&quot;</span>.center(<span class="hljs-number">11</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;free.length&#125;</span>&quot;</span>.center(<br>            <span class="hljs-number">11</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;free.start + free.length - <span class="hljs-number">1</span>&#125;</span>&quot;</span>.center(<span class="hljs-number">11</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">34</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已分配表&quot;</span>.center(<span class="hljs-number">32</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;名字&quot;</span>.center(<span class="hljs-number">10</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">&quot;起址&quot;</span>.center(<span class="hljs-number">10</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">&quot;长度&quot;</span>.center(<span class="hljs-number">10</span>))<br>    <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> allocated_list:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;job.name&#125;</span>&quot;</span>.center(<span class="hljs-number">11</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;job.start&#125;</span>&quot;</span>.center(<br>            <span class="hljs-number">11</span>) + <span class="hljs-string">&quot;|&quot;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;job.length&#125;</span>&quot;</span>.center(<span class="hljs-number">11</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.center(<span class="hljs-number">34</span>, <span class="hljs-string">&#x27;-&#x27;</span>))<br></code></pre></td></tr></table></figure><p>(请无视这粗暴的代码分行，这是我用IDEA快捷格式化出来的。。。)<br />如果不明白其中的<code>center</code>方法的话，可以看我之后的随笔（写完后会在这里放跳转链接）。<br />在这个函数第二行我调用了一个<code>free_list_sort</code>函数，作用如其名，用来对空闲分区列表中的空闲分区排序。</p><h2 id="对空闲分区列表进行排序"><a class="markdownIt-Anchor" href="#对空闲分区列表进行排序"></a> 对空闲分区列表进行排序</h2><p>虽然看上去是写了一个函数，但其实用的还是python自带的<code>sorted</code>函数进行的排序<s>因为真的太好用啦</s><br />为什么要特地写这个函数？因为分配主存空间有三种算法，最先、最优和最坏适应，这里我就写了三个排序方式：按照起址、长度升序、长度逆序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">free_list_sort</span>(<span class="hljs-params">method</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;为空闲表选择排序方式&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list<br>    <span class="hljs-keyword">if</span> method == <span class="hljs-string">&#x27;A&#x27;</span>:<br>        free_list = <span class="hljs-built_in">sorted</span>(free_list, key=<span class="hljs-keyword">lambda</span> free: free.start)  <span class="hljs-comment"># 按照起址排序</span><br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;B&#x27;</span>:<br>        free_list = <span class="hljs-built_in">sorted</span>(free_list, key=<span class="hljs-keyword">lambda</span> free: free.length)  <span class="hljs-comment"># 按照长度排序</span><br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;C&#x27;</span>:<br>        free_list = <span class="hljs-built_in">sorted</span>(free_list, key=<span class="hljs-keyword">lambda</span> free: free.length, reverse=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 按照长度排逆序</span><br></code></pre></td></tr></table></figure><p>这里的用到的<code>sorted</code>函数和<code>sort</code>方法类似，都接受两个作用一样的可选参数key和reverse，这两个参数有什么用可以看这篇文章：<a href="https://map1e-g.github.io/2022/04/17/python-essay-1/">点我跳转</a><br />而lambda表达式就是一个单表达式函数，也可以当成匿名函数。在对可迭代对象进行排序的时候，我们都可以用lambda表达式定义简短的key函数。关于lambda表达式可能之后会写在随笔或者学习笔记里。</p><h2 id="分配主存"><a class="markdownIt-Anchor" href="#分配主存"></a> 分配主存</h2><p>虽然有三种算法，但是由于我的空闲分区和已分配分区是分开的，所以不同的地方只有排序上，剩下的找空闲分区并安排的操作是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">allocate</span>(<span class="hljs-params">name, length, method</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;分配主存空间&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list, allocated_list<br>    free_list_sort(method)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(free_list)):<br>        <span class="hljs-comment"># 找到可进行分配的空间</span><br>        <span class="hljs-keyword">if</span> free_list[i].length &gt;= length:<br>            allocated_list.append(Allocated(name, free_list[i].start, length))<br>            allocated_list = <span class="hljs-built_in">sorted</span>(allocated_list, key=<span class="hljs-keyword">lambda</span> job: job.start)<br>            <span class="hljs-keyword">if</span> free_list[i].length == length:<br>                <span class="hljs-keyword">del</span> free_list[i]<br>            <span class="hljs-keyword">else</span>:<br>                free_list[i].start = free_list[i].start + length<br>                free_list[i].length = free_list[i].length - length<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分配成功！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分配失败！&quot;</span>)<br></code></pre></td></tr></table></figure><p>在找空闲分区前，我们先按照给定的算法对空闲分区列表进行排序，然后再去遍历这个列表，尝试找到合适的分区并对作业进行分配。<br />这里有两种情况，一种是作业长度刚好等于找到的空闲分区长度，这时候直接删除掉对应的空闲分区即可；若作业长度小于空闲分区的长度，这个空闲分区就应该重新计算起址和长度。</p><h2 id="回收主存"><a class="markdownIt-Anchor" href="#回收主存"></a> 回收主存</h2><p>这部分其实涉及到两个东西，一个是回收，一个是合并。<br />先来看回收：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recycle</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;回收空间&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list, allocated_list<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(allocated_list)):<br>        <span class="hljs-comment"># 检查已分配表中是否有该作业</span><br>        <span class="hljs-keyword">if</span> allocated_list[i].name == name:<br>            free_list.append(Free(allocated_list[i].start, allocated_list[i].length))<br>            free_list_sort(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(free_list)):<br>                <span class="hljs-comment"># 找出新加入的空闲表的索引并调用merge函数进行合并</span><br>                <span class="hljs-keyword">if</span> free_list[index].start == allocated_list[i].start:<br>                    merge(index)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">del</span> allocated_list[i]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;回收成功！&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;回收失败！&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以看出遍历一遍已分配列表就好啦，找到对应名字的作业后，先在空闲分区列表中加入一个新的空闲分区，然后对这个新的空闲分区调用<code>merge</code>函数进行合并，最后使用<code>del</code>函数删除掉这个作业即可~<br />那么我们再来看看合并函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;合并空间&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> free_list<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 第一个元素，只需向下合并</span><br>        <span class="hljs-keyword">if</span> free_list[index].start + free_list[index].length == free_list[index + <span class="hljs-number">1</span>].start:<br>            <span class="hljs-comment"># 当前起址加上长度等于下个起址，可以合并</span><br>            free_list[index].length = free_list[index].length + free_list[index + <span class="hljs-number">1</span>].length<br>            <span class="hljs-keyword">del</span> free_list[index + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">elif</span> index == <span class="hljs-built_in">len</span>(free_list) - <span class="hljs-number">1</span>:<br>        <span class="hljs-comment"># 最后一个元素，只需向上合并</span><br>        <span class="hljs-keyword">if</span> free_list[index - <span class="hljs-number">1</span>].start + free_list[index - <span class="hljs-number">1</span>].length == free_list[index].start:<br>            <span class="hljs-comment"># 上个起址加上长度等于当前起址，可以合并</span><br>            free_list[index - <span class="hljs-number">1</span>].length = free_list[index - <span class="hljs-number">1</span>].length + free_list[index].length<br>            <span class="hljs-keyword">del</span> free_list[index]<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 向上向下均要检查</span><br>        <span class="hljs-keyword">if</span> free_list[index].start + free_list[index].length == free_list[index + <span class="hljs-number">1</span>].start:<br>            <span class="hljs-comment"># 当前起址加上长度等于下个起址，可以合并</span><br>            free_list[index].length = free_list[index].length + free_list[index + <span class="hljs-number">1</span>].length<br>            <span class="hljs-keyword">del</span> free_list[index + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> free_list[index - <span class="hljs-number">1</span>].start + free_list[index - <span class="hljs-number">1</span>].length == free_list[index].start:<br>            <span class="hljs-comment"># 上个起址加上长度等于当前起址，可以合并</span><br>            free_list[index - <span class="hljs-number">1</span>].length = free_list[index - <span class="hljs-number">1</span>].length + free_list[index].length<br>            <span class="hljs-keyword">del</span> free_list[index]<br>        <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>由于我们在回收的时候重新“整理”（排序）了空闲分区列表，列表中的空闲分区现在是连续（有序）的，所以可以直接用下标进行数据处理。<br />不过在上下均要回收的时候，不要搞错了数组下标以及合并先后顺序、合并的应该是哪个空闲分区。</p><h2 id="测试代码"><a class="markdownIt-Anchor" href="#测试代码"></a> 测试代码</h2><p>为了方便提前提供了一点数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 预输入数据</span><br>    free_1 = Free(<span class="hljs-number">10</span>, <span class="hljs-number">16</span>)<br>    free_2 = Free(<span class="hljs-number">36</span>, <span class="hljs-number">14</span>)<br>    free_3 = Free(<span class="hljs-number">55</span>, <span class="hljs-number">10</span>)<br>    free_4 = Free(<span class="hljs-number">70</span>, <span class="hljs-number">30</span>)<br>    free_list.append(free_1)<br>    free_list.append(free_2)<br>    free_list.append(free_3)<br>    free_list.append(free_4)<br>    job_1 = Allocated(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">10</span>)<br>    job_2 = Allocated(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>)<br>    job_3 = Allocated(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">65</span>, <span class="hljs-number">5</span>)<br>    allocated_list.append(job_1)<br>    allocated_list.append(job_2)<br>    allocated_list.append(job_3)<br>    input_data()<br></code></pre></td></tr></table></figure><p>那么代码部分到这就堂堂完结啦</p><h1 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h1><p>这部分还请大家自行验证（因为不想放图…）</p><h1 id="尾声"><a class="markdownIt-Anchor" href="#尾声"></a> 尾声</h1><h2 id="sfont-size3-facemicrosoft-yahei尾声就是没有尾声-fonts"><a class="markdownIt-Anchor" href="#sfont-size3-facemicrosoft-yahei尾声就是没有尾声-fonts"></a> <s><font size=3 face='Microsoft YaHei'>尾声就是没有尾声。</font></s></h2><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记——列表中的方法</title>
    <link href="/2022/04/20/python-learning-2/"/>
    <url>/2022/04/20/python-learning-2/</url>
    
    <content type="html"><![CDATA[<h1 id="列表中的方法"><a class="markdownIt-Anchor" href="#列表中的方法"></a> 列表中的方法</h1><p>我们先定义(约定好)一个用于示例的列表，以方便后续调用它。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>,]<br></code></pre></td></tr></table></figure><h2 id="appende方法"><a class="markdownIt-Anchor" href="#appende方法"></a> <code>append(e)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />在尾部添加一个元素 e</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.append(<span class="hljs-number">6</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><h2 id="clear方法"><a class="markdownIt-Anchor" href="#clear方法"></a> <code>clear()</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />删除所有元素</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.clear()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[]<br></code></pre></td></tr></table></figure><h2 id="copy方法"><a class="markdownIt-Anchor" href="#copy方法"></a> <code>copy()</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />对列表进行<strong>浅复制</strong></p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">stock</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br><span class="hljs-meta">... </span>        self.num = num<br>        <br><span class="hljs-meta">&gt;&gt;&gt; </span>A = stock(<span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list = [A]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b_list = a_list.copy()<br><span class="hljs-meta">&gt;&gt;&gt; </span>A.num = <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b_list[<span class="hljs-number">0</span>].num<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>说明：这里涉及到一个概念：<strong>浅复制（浅拷贝）<strong>和</strong>深复制（深拷贝）</strong>。</p><p>“<strong>浅复制</strong>是指构建一个新的容器对象，然后填充原对象中子对象的引用。本质上浅复制只执行一层，复制过程不会递归，因此不会创建子对象的副本。<br /><strong>深复制</strong>是递归复制，首先构造一个新的容器对象，然后递归地填充原始对象中子对象的副本。”<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[1]</span></a></sup></p><h2 id="counte方法"><a class="markdownIt-Anchor" href="#counte方法"></a> <code>count(e)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />列表中 e 元素出现的次数</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.count(<span class="hljs-number">1</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="extendit方法"><a class="markdownIt-Anchor" href="#extendit方法"></a> <code>extend(it)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />将可迭代对象 it 里的元素添加到尾部</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b_list = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.extend(b_list)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="indexe方法"><a class="markdownIt-Anchor" href="#indexe方法"></a> <code>index(e)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />找到 e 在序列中第一次出现的位置</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.index(<span class="hljs-number">4</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="inserti-e方法"><a class="markdownIt-Anchor" href="#inserti-e方法"></a> <code>insert(i, e)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />在索引 i 处添加空间，并将 e 元素插入到这个地方</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h2 id="popi方法"><a class="markdownIt-Anchor" href="#popi方法"></a> <code>pop([i])</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />删除索引 i 位置的值并<strong>返回</strong>这个值，i 的默认值为最后一个元素的位置</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.pop(<span class="hljs-number">0</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.pop()<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="removee方法"><a class="markdownIt-Anchor" href="#removee方法"></a> <code>remove(e)</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />删除列表里第一次出现的 e 元素</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.remove(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h2 id="reverse方法"><a class="markdownIt-Anchor" href="#reverse方法"></a> <code>reverse()</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />反转列表元素的排列顺序</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="sortkey-reverse方法"><a class="markdownIt-Anchor" href="#sortkey-reverse方法"></a> <code>sort([key], [reverse])</code>方法</h2><div class="note note-info">            <p><strong>描述：</strong><br />就地对列表进行排序，reverse默认值为False</p>          </div>  <p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a_list.sort(reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_list<br>[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>说明：<br />建议配合<a href="https://map1e-g.github.io/2022/04/17/python-essay-1/">这篇随笔</a>食用</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python随笔-1</title>
    <link href="/2022/04/17/python-essay-1/"/>
    <url>/2022/04/17/python-essay-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>其实就是想补充下多道系统作业那篇文章里讲到的东西（指getMethod函数），补充下相关知识方便各位理解。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="前后双下划线方法"><a class="markdownIt-Anchor" href="#前后双下划线方法"></a> 前后双下划线方法</h2><p>同时具有前后双下划线的名称在Python中有特殊用途，我们最熟悉的应该就是<code>__init__</code>了，构造对象函数。当然啦，Python还是有非常多的对象属性的，如果想了解更多对象属性，可以调用<code>dir</code>函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(<span class="hljs-built_in">max</span>)<br>[<span class="hljs-string">&#x27;__call__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <br><span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <br><span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <br><span class="hljs-string">&#x27;__module__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__qualname__&#x27;</span>,<br> <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__self__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>,<br>  <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;__text_signature__&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在这里，我直接查看了一个内置函数<code>max</code>的属性，可以看到有非常多属性，我们也不必全部知道他们都用来干嘛。<br />仔细看的话会发现，<code>__lt__</code>也在里面，那么它到底是什么呢？其实它代表的是<strong>比较运算符’&lt;’</strong>。</p><h2 id="sort函数"><a class="markdownIt-Anchor" href="#sort函数"></a> sort函数</h2><p>先上Python官方文档<a href="https://docs.python.org/3.9/library/stdtypes.html#list.sort">点我跳转</a>：</p><blockquote><p>sort(*, key=None, reverse=False)</p><blockquote><p>This method sorts the list in place, using only &lt; comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).</p></blockquote></blockquote><p>也就是说，<code>sort</code>方法其实是根据 &lt; 运算符来进行排序的，也就是升序排序，如果觉得文字难以读懂，不妨写点东西试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>=[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>我们也应该记住一点，<code>sort</code>的排序算法是稳定的，当两个值相等的时候，即使是排序后它们的相对位置也不会变。<br /><em><strong>扩展</strong></em></p><blockquote><p>从上面我们能看到<code>sort</code>还支持两个额外的参数（注意是keyword-only arguments，传入必须像这样：<code>key=xxx, reverse=xxx</code>）<br />reverse很好理解，传入一个Boolean值（True or False），如果是True则倒序排列，默认为False。<br />key则用来产生排序算法所依赖的对比关键字，比如说，在对一些字符串排序时，可以用<code>key=str.lower</code>来实现忽略大小写的排序，或者用<code>key=len</code>来实现基于字符串长度的排序。</p></blockquote><h1 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h1><p>看完上面这点，再结合函数学习笔记那里的一些知识，其实就应该能清楚知道<code>getMethod</code>的机制和作用什么的了，传入一个字符串，根据字符串的不同返回不同的函数对象，用来重载JCB类的<code>__lt__</code>属性（在Python中是可以重载运算符的），这样在之后，我们对含有JCB类对象的列表中调用<code>sort</code>方法，就可以按照我们想要的排序方式来排序列表了。</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Essay</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记——函数</title>
    <link href="/2022/04/14/python-learning-1/"/>
    <url>/2022/04/14/python-learning-1/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文章用到的语言：Python</p>          </div><h1 id="函数作为对象"><a class="markdownIt-Anchor" href="#函数作为对象"></a> 函数作为对象</h1><p>在Python中，函数也是对象，所以我们可以把函数分配给变量、存储在数据结构中、作为参数传递给其他函数，也能作为其他函数的返回值。<br />初次看到这些内容的时候，我是挺惊讶而且发自内心的“すごい！”并且迫不及待地想要理解和掌握。<br />感觉写文章就是一个非常不错的方式，所以在这里我会尝试用自己所理解到的东西来完成这篇文章。<br />如果有什么问题的话可以尝试联系我~ <a href="https://map1e-g.github.io/about/">联系我</a></p><h2 id="怎么理解函数是对象"><a class="markdownIt-Anchor" href="#怎么理解函数是对象"></a> 怎么理解函数是对象</h2><p>现在有这样一个东西：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><p>这就是一个加法函数，传入 a 和 b 的值然后返回二者相加的值，我们可以在控制台调用它得到这样一个结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>如果我现在这么做的话（可以思考一下这段代码做了什么以及输出的结果）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>another_add = add<br><span class="hljs-meta">&gt;&gt;&gt; </span>another_add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>没错，输出的结果就是<code>5</code><br />接下来我们把原来定义的<code>add</code>函数用del删除，再调用<code>another_add</code>试试看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> add<br><span class="hljs-meta">&gt;&gt;&gt; </span>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>NameError: name <span class="hljs-string">&#x27;add&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>another_add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>现在<code>add</code>用不了了，但是<code>another_add</code>还能用，为什么呢？因为函数对象及其名称是相互独立的实体：<strong>指向函数的变量和函数本身实际上是彼此独立的</strong>。<br />这边可以了解一下下面这些东西（引用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python编程 从入门到实践（第2版）》 [美]埃里克·马瑟斯 人民邮电出版社">[1]</span></a></sup>）：</p><blockquote><p>变量是标签</p><blockquote><p>变量常被描述为可用于存储值的盒子。<br /><strong>一种好得多的定义是，变量是可以赋给值的标签，也可以说变量指向特定的值。</strong></p></blockquote></blockquote><p><em><strong>以下是扩展</strong></em></p><blockquote><p>Python在创建函数时都会为每个函数附加一个用于调试的字符串标识符，使用__name__属性来访问它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>add.__name__<br><span class="hljs-string">&#x27;add&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>another.__name__<br><span class="hljs-string">&#x27;add&#x27;</span><br></code></pre></td></tr></table></figure><p>PS:当然是在<code>add</code>没被删除之前调用的，删除后调用了会报错：<code>NameError: name 'add' is not defined</code><br />由于是在创建函数的时候给出的标识符，所以即使把这个函数分配给了另一个变量，这个标识符也不会变</p></blockquote><h2 id="把函数存储在数据结构中"><a class="markdownIt-Anchor" href="#把函数存储在数据结构中"></a> 把函数存储在数据结构中！</h2><p>由于函数是个对象，所以可以把函数也存储在数据结构当中，并且访问或使用他们。<br />比如把他们塞进列表里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>funcs = [another_add, <span class="hljs-built_in">max</span>, <span class="hljs-built_in">pow</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>funcs<br>[&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt;, &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt;, &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt;]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> fun <span class="hljs-keyword">in</span> funcs:<br><span class="hljs-meta">... </span>   <span class="hljs-built_in">print</span>(fun, fun(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt; <span class="hljs-number">5</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt; <span class="hljs-number">3</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>你也可以把它们塞进字典里，同样的，我们尝试访问这个字典，然后试着遍历这个字典并调用这些函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs = &#123;<span class="hljs-string">&#x27;another_add&#x27;</span>:another_add, <span class="hljs-string">&#x27;max&#x27;</span>:<span class="hljs-built_in">max</span>, <span class="hljs-string">&#x27;pow&#x27;</span>:<span class="hljs-built_in">pow</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs<br>&#123;<span class="hljs-string">&#x27;another_add&#x27;</span>: &lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt;, <span class="hljs-string">&#x27;max&#x27;</span>: &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt;, <span class="hljs-string">&#x27;pow&#x27;</span>: &lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt;&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> fun <span class="hljs-keyword">in</span> dic_funcs.values():<br><span class="hljs-meta">... </span>   <span class="hljs-built_in">print</span>(fun, fun(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    <br>&lt;function add at <span class="hljs-number">0x0000024777A49E50</span>&gt; <span class="hljs-number">5</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt; <span class="hljs-number">3</span><br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">pow</span>&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>并且，在这些数据结构里的函数对象都可以直接调用，不需要特意为他们分配一个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>funcs[<span class="hljs-number">0</span>](<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">5</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dic_funcs[<span class="hljs-string">&#x27;max&#x27;</span>](<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><em><strong>本小节的补充</strong></em></p><blockquote><p><code>&lt;built-in function max&gt;</code>指出<code>max</code>函数是python的一个内置函数，所以给出的不是地址<br /><code>max</code>函数用于查找可迭代的最大值，关于可迭代，在之后的文章可能会介绍（也是python特性哦）<br /><code>pow(x, y)</code>函数就是平方函数了，将x的值返回为y的幂</p></blockquote><h2 id="将函数传递给其他函数"><a class="markdownIt-Anchor" href="#将函数传递给其他函数"></a> 将函数传递给其他函数</h2><p>由于函数是对象，因此可以将其作为参数传递给其他函数。<br />让我们通过一个例子来理解下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_max_or_min</span>(<span class="hljs-params">fun</span>):<br>value = fun(<span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p><code>get_max_or_min</code>函数获取一个函数参数，并调用这个函数得到一个值，然后将它打印出来，在这里可以由函数的名称看出来，我们可以向其中传入<code>max</code>或<code>min</code>函数<br />让我们尝试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>get_max_or_min(<span class="hljs-built_in">max</span>)<br><span class="hljs-number">10</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>get_max_or_min(<span class="hljs-built_in">min</span>)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可以看到都输出了正确的结果<br />“将函数对象作为参数传递给其他函数的功能非常强大，可以用来将程序中的<strong>行为</strong>抽象出来并传递出去。”<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup><br /><em><strong>扩展</strong></em><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup></p><blockquote><p>“能接受其他函数作为参数的函数称为<strong>高阶函数</strong>。”<br />“比如<code>map</code>函数，<code>map</code>接受一个函数对象和一个可迭代对象，然后在可迭代对象中的每个元素上调用该函数来生成结果。”<br />这里我们调用我们的<code>add</code>函数来看看<code>map</code>函数做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>可以看出，<code>map</code>函数遍历了整个列表并将<code>add</code>函数应用于每个元素，而且得到了一个新列表对象，存储两数相加后的结果。</p></blockquote><h2 id="嵌套函数"><a class="markdownIt-Anchor" href="#嵌套函数"></a> 嵌套函数</h2><p>在Python中，甚至可以在函数中定义函数，就是之前写多道系统作业调度模拟程序提到过的东西（<a href="https://map1e-g.github.io/2022/04/13/multi-JCB/">戳我跳转文章</a>）<br />在这里我们定义一个用来计算的函数，根据传入字符串的不同返回不同的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">text, x, y</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a - b<br><span class="hljs-keyword">if</span> text == <span class="hljs-string">&#x27;add&#x27;</span>:<br><span class="hljs-keyword">return</span> add(x, y)<br><span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;sub&#x27;</span>:<br><span class="hljs-keyword">return</span> sub(x, y)<br><span class="hljs-meta">&gt;&gt;&gt; </span>cal(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cal(<span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>但是需要注意的是嵌套函数的作用域：<strong>仅在创建它的函数的内部</strong><br />如果我们想在函数外部使用这个函数的话，可以像我上边提到的那篇文章中那样，创建一个变量，并把嵌套函数返回给父函数的调用者。<br />在这里，我就写个根据会员等级判断打折力度的函数来作为例子吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">discount</span>(<span class="hljs-params">level</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">platinum</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.75</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gold</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.8</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sliver</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.85</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copper</span>(<span class="hljs-params">price</span>):<br>        <span class="hljs-keyword">return</span> price*<span class="hljs-number">0.9</span><br>    <span class="hljs-keyword">if</span> level == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> platinum<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> gold<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> sliver<br>    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> copper<br></code></pre></td></tr></table></figure><p>然后再测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>discount(<span class="hljs-number">3</span>)<br>&lt;function discount.&lt;<span class="hljs-built_in">locals</span>&gt;.gold at <span class="hljs-number">0x000001CF0C9BE3A0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_customer = discount(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a_customer(<span class="hljs-number">100</span>)<br><span class="hljs-number">80.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>discount(<span class="hljs-number">3</span>)(<span class="hljs-number">100</span>)<br><span class="hljs-number">80.0</span><br></code></pre></td></tr></table></figure><p><em>“这意味着函数不仅可以通过参数<strong>接受行为</strong>，还可以<strong>返回行为</strong>。”</em><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社">[2]</span></a></sup></p><h2 id="日后计划"><a class="markdownIt-Anchor" href="#日后计划"></a> 日后计划</h2><p>以后学到的有关函数这部分的内容也会一起在这里更新。</p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>《Python编程 从入门到实践（第2版）》 [美]埃里克·马瑟斯 人民邮电出版社<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>《Python Tricks 深入理解python特性》 [德]达恩·巴德尔 人民邮电出版社<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统原理——多道系统作业调度</title>
    <link href="/2022/04/13/multi-JCB/"/>
    <url>/2022/04/13/multi-JCB/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文章用到的语言：Python</p>          </div><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>其实一周前就把程序写完了，但是因为博客最近才搭好以及最近才学习了一手markdown所以现在才开始写<s><em>（绝对不是我懒！）</em></s><br />操作系统课程的作业，其实挺不想写的<s>（真的）</s>，毕竟我数据结构与算法学得很垃圾www，就当顺便学习python好了</p><h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h1><p>这部分略过。（因为真的没什么好写的，以后再补充一下吧）</p><blockquote><p>复制实验说明上的原话：</p><blockquote><p>由于在多道批处理系统中，一批作业投入运行，调度作业时需要根据当前系统各类空闲资源的情况选择一个或多个作业进入内存，再按照进程调度方式选择一个作业的进程占用 CPU。<br />每个作业由一个作业控制块JCB表示，JCB可以包含如下信息：作业名、提交时间、所需的运行时间、所需的资源、作业状态、链指针等等。<br />作业的状态可以是等待W(Wait)、运行R(Run)和完成F(Finish)三种状态之一。每个作业的最初状态总是等待W。<br />各个等待的作业按照提交时刻的先后次序排队，总是首先调度等待队列中队首的作业。<br />每个作业完成后要打印该作业的开始运行时刻、完成时刻、周转时间和带权周转时间，这一组作业完成后要计算并打印这组作业的平均周转时间、带权平均周转时间。</p></blockquote></blockquote><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><h2 id="核心"><a class="markdownIt-Anchor" href="#核心"></a> 核心</h2><p>有两部分，先说第一部分：作业控制块（JCB）<br />其实这里存的东西过多了，但是好处就是意思都很清晰，后面计算总时间或者打印信息什么的也方便</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">JCB</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;作业控制块&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, job_name, commit_time, run_time, source</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化作业程序块&quot;&quot;&quot;</span><br>        self.job_name = job_name  <span class="hljs-comment"># 作业名字</span><br>        self.commit_time = commit_time  <span class="hljs-comment"># 作业提交时间</span><br>        self.run_time = run_time  <span class="hljs-comment"># 作业所需时间</span><br>        self.start_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业开始时间</span><br>        self.finish_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业完成时间</span><br>        self.rr = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业响应比</span><br>        self.status = <span class="hljs-string">&#x27;w&#x27;</span>  <span class="hljs-comment"># 程序状态，w为等待，r为运行，f为完成</span><br>        self.ta_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业周转时间</span><br>        self.wta_time = <span class="hljs-number">0</span>  <span class="hljs-comment"># 作业带权周转时间</span><br>        self.source = source  <span class="hljs-comment"># 作业所需资源</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cul_rr</span>(<span class="hljs-params">self, clock</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算作业相应比&quot;&quot;&quot;</span><br>        self.rr = ((clock - self.commit_time) + self.run_time) / self.run_time<br></code></pre></td></tr></table></figure><p>然后是第二部分，这部分用到了python的特性：双下划线方法以及嵌套函数、返回函数等，这里用到的特性会放到后面要写的一些文章中更详细地介绍。<br />先看代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMethod</span>(<span class="hljs-params">method</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;不同算法的排序方法&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">FCFS_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.commit_time &lt; other.commit_time<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SJF_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.run_time &lt; other.run_time<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">HRRF_lt</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.rr &gt; other.rr<br><br>    <span class="hljs-keyword">if</span> method == <span class="hljs-string">&#x27;FCFS&#x27;</span>:<br>        <span class="hljs-keyword">return</span> FCFS_lt<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;SJF&#x27;</span>:<br>        <span class="hljs-keyword">return</span> SJF_lt<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-string">&#x27;HRRF&#x27;</span>:<br>        <span class="hljs-keyword">return</span> HRRF_lt<br></code></pre></td></tr></table></figure><p>调用这个方法，传入一个字符串，根据不同的字符串返回不同的排序方法，这里一共用到了三种算法：</p><ul><li>FCFS：先来先服务</li><li>SJF：短作业优先</li><li>HRRF：响应比最高者优先</li></ul><p>比如我要用FCFS，那么就：<code>JCB.__lt__ = getMethod('FCFS')</code>，这里getMethod返回了一个函数对象，再赋值给了JCB类的<code>__lt__()</code>方法，这样<code>JCB.__lt__()</code>就和<code>FCFS_lt()</code>一样了（<strong>我省略了参数order</strong>），这个方法在之后的文章再详细说，<br />现在可以这样理解：这么做重载了JCB类的默认比较方法，两个JCB之间可以比大小了，怎么比就看<code>__lt__()</code>里了。<br />那么能比较大小了，排序就能方便起来，而python里边提供了<code>sort()</code>函数来对列表进行永久排序，这个时候即使列表里是一堆JCB对象，我们也可以进行排序。</p><h2 id="算法部分"><a class="markdownIt-Anchor" href="#算法部分"></a> 算法部分</h2><p>注释写得算比较清楚所以在这里不多赘述了，以后有空说不定会更新<s>（实打实的懒狗）</s><br />其实写得不算好吧…自己感觉是写复杂了，某些地方凭感觉写了点东西保证不出错，比如那个删除队列，按道理来说有写判断条件的话就不会出错</p><div class="note note-warning">            <p>注意这里用到了<code>copy.deepcopy()</code>，需要导入copy模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br></code></pre></td></tr></table></figure>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simulator</span>(<span class="hljs-params">JCB_queue, method, src</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;作业调度模拟程序&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 系统时钟和资源数</span><br>    clock = <span class="hljs-number">0</span><br>    source = src<br>    <span class="hljs-comment"># 平均周转时间</span><br>    avg_ta_time = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 平均带权周转时间</span><br>    avg_wta_time = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 拷贝队列</span><br>    copy_queue = copy.deepcopy(JCB_queue)<br>    <span class="hljs-comment"># 队列长度</span><br>    queue_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(copy_queue))<br>    <span class="hljs-comment"># 创建执行队列和等待队列</span><br>    wait_queue = []<br>    run_queue = []<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 排序</span><br>    JCB.__lt__ = getMethod(<span class="hljs-string">&#x27;FCFS&#x27;</span>)<br>    copy_queue.sort()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 运行队列中的作业变更</span><br>        <span class="hljs-keyword">if</span> run_queue:<br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> run_queue:<br>                <span class="hljs-comment"># 检查作业是否完成</span><br>                <span class="hljs-keyword">if</span> job.run_time &lt;= clock - job.start_time <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;r&#x27;</span>:<br>                    job.status = <span class="hljs-string">&#x27;f&#x27;</span>  <span class="hljs-comment"># 将当前作业状态设置为完成</span><br>                    job.finish_time = clock  <span class="hljs-comment"># 作业完成（结束）时间为当前系统时间</span><br>                    job.ta_time = job.finish_time - job.commit_time  <span class="hljs-comment"># 作业周转时间 = 作业完成时间 - 作业提交时间</span><br>                    job.wta_time = job.ta_time / job.run_time  <span class="hljs-comment"># 作业带权周转时间 = 作业周转时间 / 作业所需时间</span><br>                    avg_ta_time = avg_ta_time + job.ta_time<br>                    avg_wta_time = avg_wta_time + job.wta_time<br>                    num = num + <span class="hljs-number">1</span>  <span class="hljs-comment"># 作业完成数+1</span><br>                    source = source + job.source  <span class="hljs-comment"># 归还资源</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;作业名：<span class="hljs-subst">&#123;job.job_name&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业开始时间：<span class="hljs-subst">&#123;job.start_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业完成时间：<span class="hljs-subst">&#123;job.finish_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业周转时间：<span class="hljs-subst">&#123;job.ta_time&#125;</span>\t&quot;</span><br>                          <span class="hljs-string">f&quot;作业带权周转时间：<span class="hljs-subst">&#123;job.wta_time:<span class="hljs-number">.2</span>f&#125;</span>\t&quot;</span>)<br><br>        <span class="hljs-comment"># 检查是否有可以进入等待作业队列的作业</span><br>        <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> copy_queue:<br>            <span class="hljs-keyword">if</span> job.commit_time &lt;= clock <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;w&#x27;</span>:<br>                wait_queue.append(job)<br><br>        <span class="hljs-comment"># 等待队列不为空，检查是否有可以进入运行队列的作业</span><br>        <span class="hljs-keyword">if</span> wait_queue:<br>            <span class="hljs-comment"># 计算响应比</span><br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> wait_queue:<br>                job.cul_rr(clock)<br>            JCB.__lt__ = getMethod(method)<br>            wait_queue.sort()<br>            <span class="hljs-comment"># 用于删除等待队列列表元素的列表</span><br>            del_queue = []<br>            <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> wait_queue:<br>                <span class="hljs-keyword">if</span> job.source &lt;= source <span class="hljs-keyword">and</span> job.status == <span class="hljs-string">&#x27;w&#x27;</span>:<br>                    run_queue.append(job)<br>                    del_queue.append(job)<br>                    job.start_time = clock  <span class="hljs-comment"># 作业开始时间为当前系统时间</span><br>                    job.status = <span class="hljs-string">&#x27;r&#x27;</span><br>                    source = source - job.source<br>            <span class="hljs-keyword">if</span> del_queue <span class="hljs-keyword">and</span> wait_queue:<br>                <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> del_queue:<br>                    wait_queue.remove(job)<br><br>        <span class="hljs-comment"># 跳出循环用</span><br>        <span class="hljs-keyword">if</span> num == queue_len:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 系统时钟自增</span><br>        clock = clock + <span class="hljs-number">1</span><br>    avg_ta_time = avg_ta_time / queue_len<br>    avg_wta_time = avg_wta_time / queue_len<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;平均周转时间：<span class="hljs-subst">&#123;avg_ta_time:<span class="hljs-number">.2</span>f&#125;</span>\t带权周转时间：<span class="hljs-subst">&#123;avg_wta_time:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h2><p>其实只有一个<code>input()</code>用来获取用户输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inputJCB</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;初始化JCB队列&quot;&quot;&quot;</span><br>    JCB_queue = []<br>    src = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入系统资源数：&quot;</span>))<br>    JCB_num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业数量：&quot;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(JCB_num):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前是第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>个作业；&quot;</span>)<br>        jn = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业名字：&quot;</span>)<br>        ct = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业提交时间：&quot;</span>))<br>        rt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业运行时间：&quot;</span>))<br>        sc = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入作业所需资源：&quot;</span>))<br>        new_JCB = JCB(jn, ct, rt, sc)<br>        JCB_queue.append(new_JCB)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-comment"># 打印JCB队列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(JCB_num):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>个作业名字：<span class="hljs-subst">&#123;JCB_queue[i].job_name&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业提交时间：<span class="hljs-subst">&#123;JCB_queue[i].commit_time&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业所需运行时间：<span class="hljs-subst">&#123;JCB_queue[i].run_time&#125;</span>\t&quot;</span><br>              <span class="hljs-string">f&quot;作业所需资源数：<span class="hljs-subst">&#123;JCB_queue[i].source&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FCFS算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;FCFS&quot;</span>, src)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SJF算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;SJF&quot;</span>, src)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HRRF算法：&quot;</span>)<br>    simulator(JCB_queue, <span class="hljs-string">&quot;HRRF&quot;</span>, src)<br></code></pre></td></tr></table></figure><p>python测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    inputJCB()<br></code></pre></td></tr></table></figure><h1 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h1><p>暂时不贴结果，没找到一个好云图库放图，上传到github也不合适www<br />麻烦各位自己运行一下了</p><h1 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h1><p>日后补充<s>（兄啊一篇文章下来省略了多少啊）</s></p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p>]]></content>
    
    
    <categories>
      
      <category>Learning Log</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test my blog</title>
    <link href="/2022/04/12/Test-my-blog/"/>
    <url>/2022/04/12/Test-my-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="这是第一篇博文用于测试以及练习markdown语法"><a class="markdownIt-Anchor" href="#这是第一篇博文用于测试以及练习markdown语法"></a> 这是第一篇博文，用于测试以及练习markdown语法</h1><h2 id="打两个就是二级标题"><a class="markdownIt-Anchor" href="#打两个就是二级标题"></a> 打两个##就是二级标题</h2><h3 id="markdown字体"><a class="markdownIt-Anchor" href="#markdown字体"></a> Markdown字体</h3><p><em>斜体文本一个*</em><br /><strong>粗体文本两个*</strong><br /><em><strong>斜粗体文本三个*</strong></em></p><h3 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h3><hr /><h2 id="font-size3-facemicrosoft-yahei用三个-或者三个把文本围起来上面一行下面一行font虽然但是为什么分割线里的文本默认挺大的思考这里我用font-size改了"><a class="markdownIt-Anchor" href="#font-size3-facemicrosoft-yahei用三个-或者三个把文本围起来上面一行下面一行font虽然但是为什么分割线里的文本默认挺大的思考这里我用font-size改了"></a> <font size=3 face='Microsoft YaHei'>用三个-或者三个*把文本围起来(上面一行下面一行)</font><br />虽然但是为什么分割线里的文本默认挺大的（思考🤔（（这里我用&lt;font size&gt;改了</h2><h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3><p>两个波浪线括起来就能<s>删除</s>了</p><p><s>这样我就能乱说话乐！</s></p><p>为什么用空格不能换行啊！</p><h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3><p><u>直接用html的&lt;u&gt;标签</u></p><h3 id="脚注"><a class="markdownIt-Anchor" href="#脚注"></a> 脚注</h3><p>这里有一个脚注<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><ul><li>星号+空格+内容</li><li>或者</li><li>+号也行</li><li>-号也行</li><li>有序列表用序号</li></ul><ol><li>这是有序嵌套无序：<ul><li>我是无序</li></ul></li><li>我是有序</li></ol><h3 id="markdown区块"><a class="markdownIt-Anchor" href="#markdown区块"></a> Markdown区块</h3><blockquote><p>用&gt;加上一个空格再加上文本就好了</p><blockquote><p>区块嵌套就写多点&gt;</p><blockquote><ul><li>区块里边用列表也行</li></ul></blockquote></blockquote></blockquote><ul><li>反过来列表里用区块也行<blockquote><p>在最前边摁个tab就好啦</p></blockquote></li></ul><h3 id="markdown-代码"><a class="markdownIt-Anchor" href="#markdown-代码"></a> Markdown 代码</h3><p>在一行里直接用`包起来就好啦 -&gt; <code>print()</code>函数<br />代码块就用三个`包起来</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topics</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示所有的主题&quot;&quot;&quot;</span><br>    topics = Topic.objects.order_by(<span class="hljs-string">&#x27;data_added&#x27;</span>)<br>    context = &#123;<span class="hljs-string">&#x27;topics&#x27;</span>: topics&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;learning_logs/topics.html&#x27;</span>, context)<br></code></pre></td></tr></table></figure><h3 id="markdown-链接"><a class="markdownIt-Anchor" href="#markdown-链接"></a> Markdown 链接</h3><p>休息一下，听首歌吧~ <a href="https://www.bilibili.com/video/BV1ty4y1y76V?share_source=copy_web"><s>神必链接</s></a></p><h3 id="markdown-图片"><a class="markdownIt-Anchor" href="#markdown-图片"></a> Markdown 图片</h3><p>如图：<br /><img src="https://pic1.zhimg.com/v2-e81ff8868ed8bde326ae6074eb8dab40_r.jpg" alt="野兽红茶" /></p><h3 id="markdown-表格"><a class="markdownIt-Anchor" href="#markdown-表格"></a> Markdown 表格</h3><p>用 | 来分隔不同单元格，用 - 来分隔表头和其他行</p><table><thead><tr><th style="text-align:left">114</th><th style="text-align:right">514</th><th style="text-align:center">1919810</th></tr></thead><tbody><tr><td style="text-align:left">哼</td><td style="text-align:right">哼  啊</td><td style="text-align:center">啊啊啊</td></tr></tbody></table><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><hr /><h2 id="堂堂完结"><a class="markdownIt-Anchor" href="#堂堂完结"></a> 堂堂完结</h2><p>（<s>其实是想上床摆烂了</s></p><hr /><p align="center"><img src="/img/alice_happy.jpg" alt="这里有一只爱丽丝" style="width:150px; height:150px;"></p><p align="center">希望本文章能够帮到您~</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>加VX请吃KFC疯狂木曜日捏 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>Gossip</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
